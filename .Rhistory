names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
edges_seg_output_2 <- edges_seg_output %>% mutate(across(c("building", "greenness", "road", "sidewalk", "sky", "car"), ~ round(mean(.x)/(640^2), 4)))
edges_seg_output_2 %>%
pivot_longer(cols = c(building, sky, greenness, road, sidewalk, car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
View(edges_seg_output_2)
edges_seg_output[1,]
43156+132701+41387       +169173   +22653
640*640
edges_seg_output %<>%
mutate(highway = case_when(
highway == 'trunk' ~ 'trunk',
highway == 'primary' ~ 'pri',
highway == 'secondary' ~ 'sec',
highway == 'tertiary' ~ 'ter',
highway == 'residential' ~ 'res',
highway == 'unclassified' ~ 'unc',
TRUE ~ NA_character_)) %>%
filter(!is.na(highway)) %>%
mutate(highway = factor(highway, levels = c('trunk','pri','sec','ter','res','unc'))) %>%
mutate(pct_building = building/(640*640),
pct_sky = sky/(640*640),
pct_road = sky/(640*640),
pct_sidewalk = sky/(640*640),
pct_car = sky/(640*640))
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
# Load the sampled points. You need to change the following command.
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"))
# Download the output from the computer vision models. You may need to change the following command.
seg_output <- read.csv(here("Lab", "Module_4", "seg_output.csv"))
# Join them back to the `edges_azi` object that was used to download images.
edges_seg_output <- edges_azi %>% inner_join(seg_output, by=c("node_id"="img_id"))
head(edges_seg_output)
edges_seg_output %<>% # `a %<>%` is the same as `a <- a %>%`; you need to import `magrittr` to use this pipe
mutate(greenness = tree + grass + plant,
pct_greenness = greenness/(640*640))
# Map!
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "pct_greenness", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
mutate(b2s_ratio = (building + house)/(sidewalk + road + car)) %>%
mutate(b2s_ratio = case_when(
is.infinite(b2s_ratio) ~ 0,
TRUE ~ b2s_ratio))
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "b2s_ratio", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
mutate(highway = case_when(
highway == 'trunk' ~ 'trunk',
highway == 'primary' ~ 'pri',
highway == 'secondary' ~ 'sec',
highway == 'tertiary' ~ 'ter',
highway == 'residential' ~ 'res',
highway == 'unclassified' ~ 'unc',
TRUE ~ NA_character_)) %>%
filter(!is.na(highway)) %>%
mutate(highway = factor(highway, levels = c('trunk','pri','sec','ter','res','unc'))) %>%
mutate(pct_building = building/(640*640),
pct_sky = sky/(640*640),
pct_road = sky/(640*640),
pct_sidewalk = sky/(640*640),
pct_car = sky/(640*640))
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
edges_seg_output$b2s_ratio
hist(edges_seg_output$b2s_ratio)
hist(edges_seg_output$b2s_ratio, breaks = 30)
edges_seg_output$b2s_ratio>1
sum(edges_seg_output$b2s_ratio>1)
sum(edges_seg_output$b2s_ratio>1, na.rm=T)
sum(edges_seg_output$b2s_ratio>2, na.rm=T)
edges_seg_output %<>%
mutate(b2s_ratio = (building + house)/(sidewalk + road + car)) %>%
mutate(b2s_ratio = case_when(
is.infinite(b2s_ratio) ~ 0,
b2s_ratio >= 1 ~ 1,
TRUE ~ b2s_ratio))
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "b2s_ratio", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
edges_seg_output %<>%
mutate(highway = case_when(
highway == 'trunk' ~ 'trunk',
highway == 'primary' ~ 'pri',
highway == 'secondary' ~ 'sec',
highway == 'tertiary' ~ 'ter',
highway == 'residential' ~ 'res',
highway == 'unclassified' ~ 'unc',
TRUE ~ NA_character_)) %>%
filter(!is.na(highway)) %>%
mutate(highway = factor(highway, levels = c('trunk','pri','sec','ter','res','unc'))) %>%
mutate(pct_building = building/(640*640),
pct_sky = sky/(640*640),
pct_road = road/(640*640),
pct_sidewalk = sidewalk/(640*640),
pct_car = car/(640*640))
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
# Load the sampled points. You need to change the following command.
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"))
# Download the output from the computer vision models. You may need to change the following command.
seg_output <- read.csv(here("Lab", "Module_4", "seg_output.csv"))
# Join them back to the `edges_azi` object that was used to download images.
edges_seg_output <- edges_azi %>% inner_join(seg_output, by=c("node_id"="img_id"))
head(edges_seg_output)
edges_seg_output %<>% # `a %<>%` is the same as `a <- a %>%`; you need to import `magrittr` to use this pipe
mutate(greenness = tree + grass + plant,
pct_greenness = greenness/(640*640))
# Map!
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "pct_greenness", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
mutate(b2s_ratio = (building + house)/(sidewalk + road + car)) %>%
mutate(b2s_ratio = case_when(
is.infinite(b2s_ratio) ~ 0,
b2s_ratio >= 1 ~ 1,
TRUE ~ b2s_ratio))
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "b2s_ratio", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
mutate(highway = case_when(
highway == 'trunk' ~ 'trunk',
highway == 'primary' ~ 'pri',
highway == 'secondary' ~ 'sec',
highway == 'tertiary' ~ 'ter',
highway == 'residential' ~ 'res',
highway == 'unclassified' ~ 'unc',
TRUE ~ NA_character_)) %>%
filter(!is.na(highway)) %>%
mutate(highway = factor(highway, levels = c('trunk','pri','sec','ter','res','unc'))) %>%
mutate(pct_building = building/(640*640),
pct_sky = sky/(640*640),
pct_road = road/(640*640),
pct_sidewalk = sidewalk/(640*640),
pct_car = car/(640*640))
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
?face_wrap
?facet_wrap
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 1)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value), outlier.shape = NA) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = highway, y = value)) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", ncol = 3)
2
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_y", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
# Load the sampled points. You need to change the following command.
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"))
# Download the output from the computer vision models. You may need to change the following command.
seg_output <- read.csv(here("Lab", "Module_4", "seg_output.csv"))
# Join them back to the `edges_azi` object that was used to download images.
edges_seg_output <- edges_azi %>% inner_join(seg_output, by=c("node_id"="img_id"))
head(edges_seg_output)
edges_seg_output %<>% # `a %<>%` is the same as `a <- a %>%`; you need to import `magrittr` to use this pipe
mutate(greenness = tree + grass + plant,
pct_greenness = greenness/(640*640))
# Map!
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "pct_greenness", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
mutate(b2s_ratio = (building + house)/(sidewalk + road + car)) %>%
mutate(b2s_ratio = case_when(
is.infinite(b2s_ratio) ~ 0,
b2s_ratio >= 1 ~ 1,
TRUE ~ b2s_ratio))
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "b2s_ratio", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white')
tmap_arrange(t1, t2, sync = T)
edges_seg_output %<>%
filter(!is.na(highway)) %>%
mutate(highway = factor(highway, levels = c('unclassified','residential','tertiary','secondary','primary','trunk'))) %>%
mutate(pct_building = building/(640*640),
pct_sky = sky/(640*640),
pct_road = road/(640*640),
pct_sidewalk = sidewalk/(640*640),
pct_car = car/(640*640))
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 3)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk, pct_car),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value), trim=F) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
coord_flip() +
stat_summary(fun.x=mean, geom="point", size=2, color="red")+
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
stat_summary(fun.y=mean, geom="point", size=2, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
stat_summary(fun=mean, geom="point", size=2, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
stat_summary(mapping = aes(x = highway, y = value), fun=mean, geom="point", size=2, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot() +
geom_violin(mapping = aes(x = highway, y = value)) +
stat_summary(mapping = aes(x = highway, y = value), fun=mean, geom="point", size=1, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
?stat_summary
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot(mapping = aes(x = highway, y = value)) +
geom_violin() +
stat_summary(fun=mean, geom="point", size=1, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot(mapping = aes(x = highway, y = value)) +
geom_violin(fill = "a6ffbe") +
stat_summary(fun=mean, geom="point", size=1, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot(mapping = aes(x = highway, y = value)) +
geom_violin(fill = "#a6ffbe") +
stat_summary(fun=mean, geom="point", size=1, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
edges_seg_output %>%
pivot_longer(cols = c(b2s_ratio, pct_greenness, pct_building, pct_sky, pct_road, pct_sidewalk),
names_to = 'variable',
values_to = "value") %>%
ggplot(mapping = aes(x = highway, y = value)) +
geom_violin(fill = "#c7ffd6") +
stat_summary(fun=mean, geom="point", size=1, color="red")+
coord_flip() +
theme_bw() +
facet_wrap(~variable, scales = "free_x", nrow = 2)
# Load the sampled points. You need to change the following command.
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"))
# Download the output from the computer vision models. You may need to change the following command.
seg_output <- read.csv(here("Lab", "Module_4", "seg_output.csv"))
# Join them back to the `edges_azi` object that was used to download images.
edges_seg_output <- edges_azi %>%
inner_join(seg_output, by=c("node_id"="img_id"))
head(edges_seg_output)
# Load the sampled points. You need to change the following command.
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"), quiet=T)
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"), quiet=T)
edges_azi <- st_read(here("Lab", "Module_4", "edges_azi_chamblee.geojson"), quiet=F)
?tm_dots
# Map!
t1 <- tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "pct_greenness", style="quantile", palette = 'viridis')
t2 <- tm_basemap(leaflet::providers$Esri.WorldImagery) +
tm_shape(edges_seg_output %>% st_bbox() %>% st_as_sfc()) +
tm_borders(lwd = 2, col = 'white') +
tm_shape(edges_seg_output) +
tm_dots(col = "white")
tmap_arrange(t1, t2, sync = T)
tm_basemap("OpenStreetMap")+
tm_shape(edges_seg_output) +
tm_dots(col = "pct_greenness", style="quantile", palette = 'viridis')
?head
read_csv('https://ujhwang.github.io/urban-analytics-2024/Lab/module_4/seg_output.csv')
read.csv('https://ujhwang.github.io/urban-analytics-2024/Lab/module_4/seg_output.csv')
st_read('https://ujhwang.github.io/urban-analytics-2024/Lab/module_4/edges_azi_chamblee.geojson')
