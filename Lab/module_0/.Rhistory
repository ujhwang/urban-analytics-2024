library(sf)
library(tmap)
library(tidyverse)
install.packages(c('tictoc','jsonlite'))
install.packages('pdftools')
knitr::include_graphics("https://datacarpentry.org/genomics-r-intro/fig/rstudio_session_4pane_layout.png")
numeric(3)
?numeric
install.packages('parallel')
vec <- 1:80
# Using sapply with parallelization
library(parallel)
cl <- makeCluster(2)
system.time({
parSapply(cl, vec, function(x) Sys.sleep(0.1))
})
stopCluster(cl)
cl <- makeCluster(4)
system.time({
parSapply(cl, vec, function(x) Sys.sleep(0.1))
})
stopCluster(cl)
vec <- 1:100000
# Using for-loop
result_forloop <- numeric(length(vec))
system.time({
for(i in vec) {
result_forloop[i] <- factorial(i)
}
})
# Using sapply
system.time({
result_sapply <- sapply(vec, function(x) factorial(x))
})
vec <- 1:100000
# Using for-loop
result_forloop <- numeric(length(vec))
system.time({
for(i in vec) {
result_forloop[i] <- factorial(i)
}
})
# Using sapply
system.time({
result_sapply <- sapply(vec, function(x) factorial(x))
})
vec <- 1:80
# Using for-loop
system.time({
for(i in vec) {
Sys.sleep(0.1)
}
})
# Using sapply
system.time({
sapply(vec, function(x) Sys.sleep(0.1))
})
vec <- 1:80
# Using for-loop
system.time({
for(i in vec) {
Sys.sleep(0.1)
}
})
# Using sapply
system.time({
sapply(vec, function(x) Sys.sleep(0.1))
})
library(rvest)
library(dplyr)
# URL of the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
# Read the HTML from the page
page <- read_html(url)
# Extract the table
population_table <- page %>%
html_node(xpath = '//*[@id="mw-content-text"]/div[1]/table[1]') %>%
html_table(fill = TRUE)
# Convert to a data frame
df <- as.data.frame(population_table)
# Display the first few rows of the data frame
head(df)
View(df)
library(tidyverse)
# Clean and prepare the data
df <- df %>%
select(Country.or.dependency, Population) %>%
rename(country = Country.or.dependency, population = Population) %>%
mutate(population = as.numeric(gsub(",", "", population)))
# Clean and prepare the data
df <- df %>%
select(Location, Population) %>%
rename(country = Location, population = Population) %>%
mutate(population = as.numeric(gsub(",", "", population)))
# Prepare the world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
library(rnaturalearth)
install.packages('rnaturalearth')
install.packages('rnaturalearthdata')
library(rnaturalearth)
library(rnaturalearthdata)
library(ggthemes)
library(countrycode)
install.packages('countrycode')
library(countrycode)
# Convert to a data frame
df <- as.data.frame(population_table)
# Display the first few rows of the data frame
head(df)
# Clean and prepare the data
df <- df %>%
select(Location, Population) %>%
rename(country = Location, population = Population) %>%
mutate(population = as.numeric(gsub(",", "", population)))
# Prepare the world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge population data with the world map data
world_data <- left_join(world, df, by = c("name" = "country"))
# Plot the map
ggplot(data = world_data) +
geom_sf(aes(fill = population), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "lightgrey", trans = "log10") +
theme_void() +
labs(title = "World Population by Country",
fill = "Population (log scale)") +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
# Convert to a data frame
df <- as.data.frame(population_table)
# Display the first few rows of the data frame
head(df)
# Clean and prepare the data
df <- df %>%
select(Location, Population) %>%
rename(country = Location, population = Population) %>%
mutate(population = as.numeric(gsub(",", "", population)))
# Convert country names to ISO3 for merging with the world map data
df$iso_a3 <- countrycode(df$country, "country.name", "iso3c")
# Prepare the world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge population data with the world map data using ISO3 codes
world_data <- left_join(world, df, by = c("iso_a3" = "iso_a3"))
# Plot the map
ggplot(data = world_data) +
geom_sf(aes(fill = population), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "lightgrey", trans = "log10") +
theme_void() +
labs(title = "World Population by Country",
fill = "Population (log scale)") +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
