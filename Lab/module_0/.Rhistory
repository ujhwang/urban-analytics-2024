system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 10, ncol = 1000000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 1000, ncol = 10000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^8, replace = TRUE), nrow = 1000, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^8, replace = TRUE), nrow = 1000, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 2, paste, collapse = "")
})
# Compare the results
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "")
}
})
system.time({
result_apply <- apply(mat, 2, paste, collapse = "")
})
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^8, replace = TRUE), nrow = 1000, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^8, replace = TRUE), nrow = 1000, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^8, replace = TRUE), nrow = 1000, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 2, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 2, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 2, paste, collapse = "")
})
# Compare the results
# Generating a large matrix of random letters
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Using a for-loop to concatenate strings across each row
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
# Using apply to concatenate strings across each row
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
# Compare the results
vec <- 1:100
# Using for-loop
system.time({
for(i in vec) {
Sys.sleep(0.01)
}
})
# Using sapply
system.time({
sapply(vec, function(x) Sys.sleep(0.01))
})
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Concatenate strings across each ROW
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[i, ], collapse = "")
}
})
system.time({
result_apply <- apply(mat, 1, paste, collapse = "")
})
mat <- matrix(sample(letters, 10^7, replace = TRUE), nrow = 100, ncol = 100000)
# Concatenate strings across each COLUMN
system.time({
result_for <- character(nrow(mat))
for (i in 1:nrow(mat)) {
result_for[i] <- paste(mat[, i], collapse = "") #<<
}
})
system.time({
result_apply <- apply(mat, 2, paste, collapse = "") #<<
})
knitr::opts_chunk$set(warning = FALSE)
nice_table <- function(df, height="150px"){
return(
df %>% kable() %>%
kable_styling(latex_options="scale_down", font_size=12) %>%
scroll_box(width = "100%", height = height)
)
}
library(xaringanthemer)
n <- 1000
df <- data.frame()
system.time({
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
}
return(df)
})
df <- data.frame()
system.time({
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
}
})
n <- 10000
df <- data.frame()
system.time({
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
}
})
df <- data.frame(x = numeric(n), y = numeric(n))
system.time({
for (i in 1:n) {
df[i, ] <- c(i, i^2)
}
})
library(tictoc)
n <- 10000
df <- data.frame()
system.time({
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i/1000 == 0) {
toc()
tic()
}
}
})
toc()
i/1000
i//1000
i%/%1000
i%%1000
n <- 10000
df <- data.frame()
system.time({
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%1000 == 0) {
toc()
tic()
}
}
})
n <- 10000
df <- data.frame()
system.time({
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%1000 == 0) {
toc()
tic()
}
}
})
n <- 10000
n <- 10000
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%1000 == 0){
toc()
tic()
}
}
n <- 20000
df <- data.frame()
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%2000 == 0) {
toc()
tic()
}
}
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%2000 == 0){
toc()
tic()
}
}
20000%%2000
n <- 20000
df <- data.frame()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%2000 == 0) {
toc()
tic()
}
}
toc()
df <- data.frame(x = numeric(n), y = numeric(n))
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%2000 == 0){
toc()
tic()
}
}
toc()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%2000 == 0) {
toc()
tic()
}
}
n <- 20000
df <- data.frame()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%2000 == 0) {
toc()
tic()
}
}
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
system.time({
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
}
})
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
system.time({
for (i in 1:n) {
df[i, ] <- c(i, i^2)
}
})
```
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%2000 == 0) {
toc()
tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%2000 == 0){
toc()
tic()
}
}
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%4000 == 0) {
toc()
tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%4000 == 0){
toc()
tic()
}
}
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (i%%4000 == 0) {
toc()
tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%4000 == 0){
toc()
tic()
}
}
0%%4000
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (!i%%4000) { # same as `if (i%%4000 == 0) {`
toc()
tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (i%%4000 == 0){
toc()
tic()
}
}
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (!i%%4000) { # same as `if (i%%4000 == 0) {`
toc()
tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (!i%%4000){
toc()
tic()
}
}
tic();toc()
print('hi');print('bye')
print('hi')print('bye')
n <- 20000
# Adding rows to an empty dataframe
df <- data.frame()
tic()
for (i in 1:n) {
df <- rbind(df, data.frame(x = i, y = i^2))
if (!i%%4000) { # same as `if (i%%4000 == 0) {`
toc();tic()
}
}
# Pre-allocating dataframe and then adding values
df <- data.frame(x = numeric(n), y = numeric(n))
tic()
for (i in 1:n) {
df[i, ] <- c(i, i^2)
if (!i%%4000){
toc();tic()
}
}
