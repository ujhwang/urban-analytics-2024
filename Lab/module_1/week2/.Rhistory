library(tidyverse)
decatur <- tigris::places("GA") %>%
filter(NAME == 'Decatur')
decatur
# city boundary
decatur <- tigris::places("GA") %>%
filter(NAME == 'Decatur') %>%
st_transform(4326)
library(sf)
# city boundary
decatur <- tigris::places("GA") %>%
filter(NAME == 'Decatur') %>%
st_transform(4326)
?get_acs
install.packages('tidycensus')
library(tidycensus)
?get_acs
decatur %>% st_write('test.geojson')
# get Census data at the Block Group level
bg <- get_acs(geography = "block group",
state = "GA",
county = c("Dekalb"),
variables = c(hhincome = 'B19019_001'),
year = 2021,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") %>%
rename(hhincome = hhincomeE) %>%
st_transform(4326)
bg_decatur <- bg[decatur,]
View(bg_decatur)
# get Census data at the Block Group level
bg <- get_acs(geography = "block group",
state = "GA",
county = c("Dekalb"),
variables = c(hhincome = 'B19019_001'),
year = 2021,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") %>%
rename(hhincome = hhincomeE) %>%
st_transform(4326)
View(bg)
# get Census data at the Block Group level
bg <- get_acs(geography = "block group",
state = "GA",
county = c("Dekalb"),
variables = c(hhincome = 'B19001'),
year = 2021,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") %>%
rename(hhincome = hhincomeE) %>%
st_transform(4326)
vars <- load_variables(2022, "acs5")
View(vars)
View(vars)
vars %>% filter(str_detect(concept, 'income')) %>% View()
vars %>% filter(str_detect(concept, 'Income')) %>% View()
vars %>% filter(str_detect(concept, 'Income') & geography = "block group") %>% View()
vars %>% filter(str_detect(concept, 'Income') & geography = "block group") %>% View()
vars %>% filter(str_detect(concept, 'Income') & geography == "block group") %>% View()
# get Census data at the Block Group level
bg <- get_acs(geography = "block group",
state = "GA",
county = c("Dekalb"),
variables = c(hhincome = 'B19013_001'),
year = 2021,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") %>%
rename(hhincome = hhincomeE) %>%
st_transform(4326)
# get Census data at the Block Group level
bg <- get_acs(geography = "block group",
state = "GA",
county = c("Dekalb"),
variables = c(hhincome = 'B19013_001'),
year = 2021,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") %>%
rename(hhincome = hhincomeE) %>%
st_transform(4326)
View(bg_decatur)
bg_decatur <- bg[decatur,]
?tidycensus::get_acs
?distinct
dupl_df <- data.frame(name = c("A", "A", "B", "C", "C", "C", "D"),
GPA = c(3.5, 3.5, 4.0, 2.0, 3.0, 3.0, 2.0))
dupl_df %>% distinct()
library(tidyverse)
dupl_df %>% distinct()
dupl_df %>% distinct(.keep_all = T)
?duplicated
duplicated(dupl_df)
# Duplicates in column "name" removed.
print(dupl_df[!duplicated(dupl_df$name),])
print(dupl_df[!duplicated(dupl_df),])
```
# Duplicates in column "name" removed.
print(dupl_df[!duplicated(dupl_df$name),])
print(dupl_df[!duplicated(dupl_df),])
# Returns a vector, not data frame
dupl_df %>%
distinct(name) # Try adding .keep_all = TRUE argument
# Returns a data frame
dupl_df %>%
distinct(name, GPA)
```
# Returns a data frame
dupl_df %>%
distinct(name, GPA)
# Returns a vector, not data frame
dupl_df %>%
distinct(name) # Try adding .keep_all = TRUE argument
# A character vector to split
onecol_df <- data.frame(labels = c('a1','b_2','c_3_2','d_4_1'))
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "numeric"))
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "numeric"))
str_split(onecol_df$labels, sep = "_")
?str_split
str_split(onecol_df$labels, pattern = "_")
str_split_fixed(onecol_df$labels, pattern = "_")
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "numeric"))
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)[,1]
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)[,2]
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>% data.frame()
str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>% as.data.frame()
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "numeric"))
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "number1", "number2"))
data.frame("alphabet", "number1", "number2")
data.frame("alphabet" = character(0), "number1" = integer(0), "number2" = integer(0))
onecol_df_split$alphabet <- str_split_fixed(onecol_df$labels, pattern = "_", n = 3)[,1]
onecol_df_split <- data.frame("alphabet" = character(0), "number1" = integer(0), "number2" = integer(0))
onecol_df_split$alphabet <- str_split_fixed(onecol_df$labels, pattern = "_", n = 3)[,1]
str_split_fixed(onecol_df$labels, pattern = "_", n = 3)
str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>%
as.data.frame()
str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>%
as.data.frame() %>%
colnames()
colnames(onecol_df_split) <- c("alphabet", "number1", "number2")
onecol_df_split <- str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>%
as.data.frame()
colnames(onecol_df_split) <- c("alphabet", "number1", "number2")
# split the character at _
onecol_df %>% separate(col = "labels", sep = "_", into = c("alphabet", "number1", "number2"))
onecol_df_split <- str_split_fixed(onecol_df$labels, pattern = "_", n = 3) %>%
as.data.frame()
colnames(onecol_df_split) <- c("alphabet", "number1", "number2")
onecol_df_split
onecol_df_split
print(onecol_df_split)
?drop_na
# This is the same toy_df from above
toy_df <- data.frame(name = c("John", "Jane", "Mary"),
treatment_a = c(NA, 16, 3),
treatment_b = c(2, 11, 1),
treatment_c = c(6, 12, NA))
# Dropping NA using is.na()
toy_df %>%
filter(!is.na(treatment_a))
toy_df %>%
drop_na(treatment_a, treatment_b)
# This check across all columns and drops all rows that have at least one NA.
toy_df %>%
drop_na()
# Dropping NA using is.na()
toy_df %>%
filter(!is.na(treatment_a))
# This is the same toy_df from above
toy_df <- data.frame(name = c("John", "Jane", "Mary", "Bob"),
treatment_a = c(NA, 16, 3, 5),
treatment_b = c(2, 11, 1, NA),
treatment_c = c(6, 12, NA, 2))
# Dropping NA using is.na()
toy_df %>%
filter(!is.na(treatment_a))
toy_df %>%
drop_na(treatment_a, treatment_b)
# This check across all columns and drops all rows that have at least one NA.
toy_df %>%
drop_na()
?map
census_wide <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, output="wide", geomtry=TRUE))
census_wide <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, output="wide", geomtry=TRUE)
library(tidycensus)
census_wide <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, output="wide", geomtry=TRUE)
census_long <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, geomtry=TRUE)
census_wide <- suppressMessages(
get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, output="wide", geomtry=TRUE))
census_long <- suppressMessages(
get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', pop = "B02001_001"),
county="Fulton", year=2022, geomtry=TRUE))
census_wide %>%
head() %>%
nice_table("350px")
census_wide %>%
head()
census_wide %>%
head() %>%
nice_table("350px")
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Open Sans"),
text_font_google   = google_font("Source Sans Pro", "400", "400i"),
code_font_google   = google_font("Fira")
)
nice_table <- function(df, height="150px"){
return(
df %>% kable() %>%
kable_styling(latex_options="scale_down", font_size=12) %>%
scroll_box(width = "100%", height = height)
)
}
census_wide %>%
head() %>%
nice_table("350px")
# A character vector to split
onecol_df <- data.frame(labels = c('a1','b_2','c_3_2','d_4_1'))
# split the character at _
onecol_df_separate <- onecol_df %>%
separate(col = "labels",
sep = "_",
into = c("alphabet", "number1", "number2"))
onecol_df_split <- str_split_fixed(onecol_df$labels,
pattern = "_",
n = 3)
onecol_df_split %<>%
as.data.frame()
print(onecol_df_split)
onecol_df_split <- as.data.frame(onecol_df_split)
colnames(onecol_df_split) <- c("alphabet", "number1", "number2")
onecol_df_split == onecol_df_separate
identical(onecol_df_split, onecol_df_separate)
onecol_df_split
onecol_df_separate
onecol_df_split
onecol_df_separate
View(onecol_df_separate)
View(onecol_df_split)
print(onecol_df_split)
onecol_df_split <- str_split_fixed(onecol_df$labels,
pattern = "_",
n = 3)
print(onecol_df_split)
print(onecol_df_separate)
jsonlite::fromJSON("example.json")
jsonlite::fromJSON("example.json") %>% flatten()
jsonlite::fromJSON("example.json") %>% jsonlite::flatten()
?fromJSON
jsonlite::fromJSON("example.json")
jsonlite::fromJSON("example.json", flatten = T)
jsonlite::fromJSON("example.json", flatten = T)
jsonlite::fromJSON("example.json", flatten = T)
jsonlite::fromJSON("example.json")
jsonlite::fromJSON("example.json") %>% .$books
jsonlite::fromJSON("example.json") %>% .$books %>% jsonlite::flatten()
jsonlite::fromJSON("example.json") %>% .$books
jsonlite::fromJSON("example.json") %>% .$books
jsonlite::fromJSON("example.json")
books <- jsonlite::fromJSON("books.json")
books
names(books)
type(books)
class(books)
names(books)
books <- jsonlite::fromJSON("books.json")
books
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
jsonlite::fromJSON("json_example_2.json")
jsonlite::fromJSON("json_example_2.json", flatten = T)
?grepl
a <- c("yoga studio", "health gym", "pizza", "YoGa")
grepl("yoga", a)
str_detect(a, "yoga")
?drop_na
?distinct
?duplicated
1600*4
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, 90, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, NA, NA, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling() %>%
column_spec(4, background = "yellow")  # Highlight row 3 (student C)
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, NA, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling() %>%
row_spec(3, background = "yellow")  # Highlight row 3 (student C)
library(kableExtra)
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, NA, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling() %>%
row_spec(3, background = "yellow")  # Highlight row 3 (student C)
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, 90, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, NA, NA, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling() %>%
column_spec(4, background = "yellow")  # Highlight row 3 (student C)
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, 90, NA, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
mutate(
math_score = ifelse(is.na(math_score), cell_spec(math_score, background = "yellow"), math_score),
science_score = ifelse(is.na(science_score), cell_spec(science_score, background = "yellow"), science_score),
english_score = ifelse(is.na(english_score), cell_spec(english_score, background = "yellow"), english_score)
) %>%
kbl(escape = FALSE) %>%  # escape = FALSE allows rendering of HTML
kable_styling()
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, 90, NA, 50, 70),
science_score = c(90, 80, 85, 95, 60, NA),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
mutate(
math_score = ifelse(is.na(math_score), cell_spec(math_score, background = "yellow"), math_score),
science_score = ifelse(is.na(science_score), cell_spec(science_score, background = "yellow"), science_score),
english_score = ifelse(is.na(english_score), cell_spec(english_score, background = "yellow"), english_score)
) %>%
kbl(escape = FALSE) %>%  # escape = FALSE allows rendering of HTML
kable_styling()
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, NA, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling()
# Create the data frame
data <- data.frame(
student = c("A", "B", "C", "D", "E", "F"),
math_score = c(100, 85, 90, 98, 50, 70),
science_score = c(90, 80, 85, 95, 60, 40),
english_score = c(100, 80, NA, 40, 100, 60)
)
# Highlight the row with NA values (row C) in yellow
data %>%
kbl() %>%
kable_styling() %>%
column_spec(4, background = "yellow")  # Highlight row 3 (student C)
jsonlite::fromJSON("json_example.json")
jsonlite::fromJSON("json_example.json") %>% .$orders %>% nice_table()
jsonlite::fromJSON("json_example.json") %>% .$orders %>% summary()
jsonlite::fromJSON("json_example.json", flatten = T) %>% .$orders %>% summary()
jsonlite::fromJSON("json_example.json") %>% .$orders
jsonlite::fromJSON("json_example.json", flatten = T) %>% .$orders
jsonlite::fromJSON("json_example.json", flatten = T) %>% .$orders %>% names()
jsonlite::fromJSON("json_example.json") %>% .$orders %>% names()
jsonlite::fromJSON("json_example.json") %>% .$orders %>% class()
jsonlite::fromJSON("json_example.json") %>% .$orders %>% sapply(class)
jsonlite::fromJSON("json_example.json", flatten = T) %>% .$orders %>% sapply(class)
